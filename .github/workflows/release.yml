name: release

on:
  workflow_dispatch:
  schedule:
    - cron: "30 18 * * *" # 매일 03:30 KST
  push:
    branches: [ "main" ]
    paths: [ "CHANGELOG.md" ]

permissions:
  contents: write
  actions: write
  issues: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  release:
    if: ${{ github.event_name != 'push' || !contains(github.event.head_commit.message, 'chore(release)') }}
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - name: Checkout (full history for tags)
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Print run URL
        run: echo "Run URL: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"

      - name: Add run link to Job Summary
        uses: actions/github-script@v7
        env:
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        with:
          script: |
            await core.summary.addHeading('Release run')
              .addLink('Open this run', process.env.RUN_URL).write()

      - name: Ensure zip is available
        run: |
          if ! command -v zip >/dev/null 2>&1; then
            sudo apt-get update && sudo apt-get install -y zip
          fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with: { node-version: '22' }

      - name: Install deps (robust)
        run: |
          npm config set fund false
          npm config set audit false
          npm ci --prefer-offline || npm install --legacy-peer-deps || true

      # ✨ 마지막 태그에서 +1 패치 (푸시 없이 태그/릴리스 생성)
      - name: Compute next tag (+1 patch) & KST date
        shell: bash
        run: |
          LAST=$(git tag -l "v*" --sort=-v:refname | head -n 1)
          if [ -z "$LAST" ]; then LAST="v0.0.0"; fi
          V=${LAST#v}; IFS='.' read -r MA MI PA <<<"$V"
          if [ -z "$MA" ] || [ -z "$MI" ] || [ -z "$PA" ]; then echo "Invalid last tag: $LAST"; exit 2; fi
          NEXT="v${MA}.${MI}.$((PA+1))"
          echo "LAST=$LAST"; echo "NEXT=$NEXT"
          echo "TAG=$NEXT" >> $GITHUB_ENV
          echo "REL_DATE=$(TZ=Asia/Seoul date +'%Y-%m-%d %H:%M KST')" >> $GITHUB_ENV

      # 📦 항상 build.zip 만들기(빌드 성공 시 산출물, 실패/없음이면 저장소 zip)
      - name: Prepare artifact (build or repo zip)
        shell: bash
        run: |
          set -e
          HAS_BUILD=$(node -p "!!((require('./package.json').scripts||{}).build)" 2>/dev/null || echo false)
          if [ "$HAS_BUILD" = "true" ]; then
            echo "→ npm run build"
            if ! npm run build; then echo "::warning::build failed; fallback to repository zip"; HAS_BUILD=false; fi
          fi
          if [ "$HAS_BUILD" = "true" ] && [ -d dist ]; then
            zip -r build.zip dist
          elif [ "$HAS_BUILD" = "true" ] && [ -d build ]; then
            zip -r build.zip build
          else
            echo "→ fallback zip of repository"
            zip -r build.zip . -x ".git/*" ".github/*" "node_modules/*"
          fi
          echo "BUILD_PATH=$(pwd)/build.zip" >> $GITHUB_ENV
          ls -al build.zip

      # ✅ 공식 액션으로 릴리스 생성(태그 미존재여도 target_commitish로 생성)
      - name: Create Release (official)
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG }}
          release_name: "Release ${{ env.TAG }} — ${{ env.REL_DATE }}"
          body: |
            ### 📦 Build
            - Attached: `build.zip`

            ### 🗓 Release Date
            - ${{ env.REL_DATE }} (KST)
          draft: false
          prerelease: false
          target_commitish: ${{ github.sha }}

      # ✅ 공식 액션으로 자산 업로드(경로 확정값 사용)
      - name: Upload build.zip asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.BUILD_PATH }}
          asset_name: build.zip
          asset_content_type: application/zip

      # 실패 시 1회 재시도, 그래도 실패면 이슈 자동 생성
      - name: Auto re-run failed jobs once
        if: ${{ failure() && github.run_attempt == '1' }}
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.actions.reRunWorkflowFailedJobs({
              owner: context.repo.owner, repo: context.repo.repo, run_id: context.runId
            })
            core.notice('Triggered auto re-run for failed jobs (attempt 2/2).')

      - name: Open failure issue with run link
        if: ${{ failure() && github.run_attempt != '1' }}
        uses: actions/github-script@v7
        env:
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        with:
          script: |
            const title = `Release workflow failed (attempt ${process.env.GITHUB_RUN_ATTEMPT})`;
            const body  = `**Run**: ${process.env.RUN_URL}\n**Ref**: ${context.ref}\n**Actor**: ${context.actor}\n**Commit**: ${context.sha}`;
            await github.rest.issues.create({
              owner: context.repo.owner, repo: context.repo.repo, title, body, labels: ['release','failed']
            })
            core.error('Opened issue for failed release run.')