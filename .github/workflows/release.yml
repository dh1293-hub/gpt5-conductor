name: release

on:
  workflow_dispatch:
  schedule:
    - cron: "30 18 * * *" # 매일 03:30 KST
  push:
    branches: [ "main" ]
    paths: [ "CHANGELOG.md" ]

permissions:
  contents: write
  actions: write
  issues: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  release:
    if: ${{ github.event_name != 'push' || !contains(github.event.head_commit.message, 'chore(release)') }}
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - name: Checkout (full history for tags)
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Print run URL
        run: echo "Run URL: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"

      - name: Add run link to Job Summary
        uses: actions/github-script@v7
        env:
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        with:
          script: |
            await core.summary.addHeading('Release run')
              .addLink('Open this run', process.env.RUN_URL).write()

      - name: Setup Node
        uses: actions/setup-node@v4
        with: { node-version: '22' }

      - name: Install deps (robust)
        run: |
          npm config set fund false
          npm config set audit false
          npm ci --prefer-offline || npm install --legacy-peer-deps

      - name: Configure git bot
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Dry run (standard-version)
        run: npx standard-version --dry-run

      - name: Bump & tag (patch)
        run: npx standard-version --release-as patch

      - name: Resolve tag & KST date
        run: |
          echo "TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
          echo "REL_DATE=$(TZ=Asia/Seoul date +'%Y-%m-%d %H:%M KST')" >> $GITHUB_ENV

      # 항상 build.zip 생성: build 있으면 빌드, 실패/없음이면 저장소 zip
      - name: Prepare artifact (build or repo zip)
        run: |
          set -e
          HAS_BUILD=$(node -p "!!((require('./package.json').scripts||{}).build)")
          if [ "$HAS_BUILD" = "true" ]; then
            echo "→ npm run build"
            if ! npm run build; then
              echo "::warning::build failed; fallback to repository zip"
              HAS_BUILD=false
            fi
          fi
          if [ "$HAS_BUILD" = "true" ] && [ -d dist ]; then
            zip -r build.zip dist
          elif [ "$HAS_BUILD" = "true" ] && [ -d build ]; then
            zip -r build.zip build
          else
            echo "→ fallback zip of repository"
            zip -r build.zip . -x ".git/*" ".github/*" "node_modules/*"
          fi
          ls -al build.zip

      - name: Keep zip as CI artifact
        uses: actions/upload-artifact@v4
        with: { name: build-zip, path: build.zip, if-no-files-found: error }

      - name: Push with tags
        run: git push --follow-tags origin HEAD:main

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          name: "Release ${{ env.TAG }} — ${{ env.REL_DATE }}"
          generate_release_notes: true
          append_body: true
          body: |
            ### 📦 Build
            - Attached: `build.zip`

            ### 🗓 Release Date
            - ${{ env.REL_DATE }} (KST)
          files: build.zip

      - name: Auto re-run failed jobs once
        if: ${{ failure() && github.run_attempt == '1' }}
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.actions.reRunWorkflowFailedJobs({ owner: context.repo.owner, repo: context.repo.repo, run_id: context.runId })
            core.notice('Triggered auto re-run for failed jobs (attempt 2/2).')

      - name: Open failure issue with run link
        if: ${{ failure() && github.run_attempt != '1' }}
        uses: actions/github-script@v7
        env:
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        with:
          script: |
            const title = `Release workflow failed (attempt ${process.env.GITHUB_RUN_ATTEMPT})`;
            const body  = `**Run**: ${process.env.RUN_URL}\n**Ref**: ${context.ref}\n**Actor**: ${context.actor}\n**Commit**: ${context.sha}`;
            await github.rest.issues.create({ owner: context.repo.owner, repo: context.repo.repo, title, body, labels: ['release','failed'] })
            core.error('Opened issue for failed release run.')