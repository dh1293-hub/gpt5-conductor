name: release

on:
  workflow_dispatch:
    inputs:
      bump_level:
        description: "Version bump (default: patch)"
        required: false
        default: patch
        type: choice
        options:
          - patch
          - minor
  schedule:
    - cron: '30 18 * * *'
  push:
    branches:
      - main
    paths:
      - CHANGELOG.md

permissions:
  contents: write
  actions: write
  issues: write

concurrency:
  group: "release-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  release:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    env:
      BUMP: ${{ inputs.bump_level || 'patch' }}
    steps:
      - name: Checkout (full history for tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure zip is available
        run: |
          if ! command -v zip >/dev/null 2>&1; then
            sudo apt-get update && sudo apt-get install -y zip
          fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install deps (best-effort)
        run: |
          npm config set fund false
          npm config set audit false
          npm ci --prefer-offline || npm install --legacy-peer-deps || true

      - name: Compute next tag (BUMP=${{ env.BUMP }}) & KST date
        shell: bash
        run: |
          set -e
          LAST=$(git tag -l "v*" --sort=-v:refname | head -n 1)
          [ -z "$LAST" ] && LAST="v0.0.0"
          V=${LAST#v}; IFS='.' read -r MA MI PA <<<"$V"
          BUMP="${BUMP:-patch}"
          case "$BUMP" in
            minor) MI=$(( ${MI:-0} + 1 )); PA=0 ;;
            *)     PA=$(( ${PA:-0} + 1 )) ;;
          esac
          NEXT="v${MA:-0}.${MI:-0}.${PA:-0}"
          echo "LAST=$LAST  â†’  NEXT=$NEXT (bump=$BUMP)"
          echo "TAG=$NEXT" >> "$GITHUB_ENV"
          echo "REL_DATE=$(TZ=Asia/Seoul date +'%Y-%m-%d %H:%M KST')" >> "$GITHUB_ENV"

      - name: Build or fallback zip
        shell: bash
        run: |
          set -e
          HAS_BUILD=$(node -p "!!((require('./package.json').scripts||{}).build)" 2>/dev/null || echo false)
          if [ "$HAS_BUILD" = "true" ]; then
            npm run build || HAS_BUILD=false
          fi
          if [ "$HAS_BUILD" = "true" ] && [ -d dist ]; then
            zip -r build.zip dist
          elif [ "$HAS_BUILD" = "true" ] && [ -d build ]; then
            zip -r build.zip build
          else
            zip -r build.zip . -x ".git/*" ".github/*" "node_modules/*"
          fi
          echo "BUILD_PATH=$PWD/build.zip" >> "$GITHUB_ENV"

      - name: Generate release body (with latest CHANGELOG section)
        shell: bash
        run: |
          set -e
          echo "### Build" > rel_body.md
          echo "- Attached: build.zip" >> rel_body.md
          echo "" >> rel_body.md
          echo "### Release Date" >> rel_body.md
          echo "- $REL_DATE (KST)" >> rel_body.md
          echo "" >> rel_body.md
          echo "### Changelog" >> rel_body.md
          if [ -f CHANGELOG.md ]; then
            awk '/^## /{if (p) exit; p=1; print; next} p{print}' CHANGELOG.md >> rel_body.md || true
          else
            echo "(No CHANGELOG.md found)" >> rel_body.md
          fi
          echo "BODY_PATH=$PWD/rel_body.md" >> "$GITHUB_ENV"

      - name: Publish release (create/update + upload)
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.TAG }}
          name: "Release ${{ env.TAG }} - ${{ env.REL_DATE }}"
          commitish: ${{ github.sha }}
          bodyFile: ${{ env.BODY_PATH }}
          makeLatest: true
          allowUpdates: true
          replacesArtifacts: true
          artifacts: ${{ env.BUILD_PATH }}