name: release

on:
  workflow_dispatch:
    inputs:
      bump_level:
        description: "Version bump (default: patch)"
        required: false
        default: patch
        type: choice
        options: [patch, minor]
      prerelease:
        description: "Mark as pre-release (rc.N)"
        required: false
        default: false
        type: boolean
  schedule:
    - cron: "30 18 * * *"
  push:
    branches: [main]
    paths: [CHANGELOG.md]

permissions:
  contents: write
  actions: write
  issues: write

concurrency:
  group: "release-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  release:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    env:
      BUMP: ${{ inputs.bump_level || 'patch' }}
      PRERELEASE: ${{ inputs.prerelease || 'false' }}
    steps:
      - name: Checkout (full history for tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Diagnostics (env & repo)
        shell: bash
        run: |
          set -euxo pipefail
          node -v || true
          npm -v || true
          uname -a || true
          git log -1 --oneline || true
          git describe --tags --abbrev=0 2>/dev/null || true
          git status -sb || true
          ls -al | head -n 200 || true

      - name: Ensure zip is available
        shell: bash
        run: |
          if ! command -v zip >/dev/null 2>&1; then
            sudo apt-get update && sudo apt-get install -y zip
          fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install deps (best-effort)
        shell: bash
        run: |
          npm config set fund false
          npm config set audit false
          npm ci --prefer-offline || npm install --legacy-peer-deps || true

      - name: Compute next tag & KST date
        shell: bash
        run: |
          set -e
          LAST=$(git tag -l "v*" --sort=-v:refname | head -n 1)
          [ -z "$LAST" ] && LAST="v0.0.0"
          V=${LAST#v}; IFS='.' read -r MA MI PA <<<"$V"
          case "${BUMP:-patch}" in
            minor) MI=$(( ${MI:-0} + 1 )); PA=0 ;;
            *)     PA=$(( ${PA:-0} + 1 )) ;;
          esac
          BASE="v${MA:-0}.${MI:-0}.${PA:-0}"
          if [ "${PRERELEASE}" = "true" ]; then
            preid="rc"
            LAST_RC=$(git tag -l "${BASE}-${preid}.*" --sort=-v:refname | head -n 1)
            if [ -z "$LAST_RC" ]; then TAG="${BASE}-${preid}.1"
            else N=${LAST_RC##*.}; [[ "$N" =~ ^[0-9]+$ ]] || N=0; TAG="${BASE}-${preid}.$((N+1))"; fi
          else
            TAG="$BASE"
          fi
          echo "TAG=$TAG" >> "$GITHUB_ENV"
          echo "REL_DATE=$(TZ=Asia/Seoul date +'%Y-%m-%d %H:%M KST')" >> "$GITHUB_ENV"

      - name: Build or fallback zip (with min-size guard)
        shell: bash
        run: |
          set -e
          # 1) 媛?ν븳 鍮뚮뱶 ?ъ슜
          HAS_BUILD=$(node -p "!!((require('./package.json').scripts||{}).build)" 2>/dev/null || echo false)
          if [ "$HAS_BUILD" = "true" ]; then
            npm run build || HAS_BUILD=false
          fi
          if [ "$HAS_BUILD" = "true" ] && [ -d dist ]; then
            zip -r build.zip dist
          elif [ "$HAS_BUILD" = "true" ] && [ -d build ]; then
            zip -r build.zip build
          else
            # 鍮뚮뱶 ?놁쓬 ????μ냼 zip
            zip -r build.zip . -x ".git/*" ".github/*" "node_modules/*"
          fi

          # 2) 理쒖냼 ?ш린(5KB) 媛?? ?덈Т ?묒? zip?대㈃ ??μ냼 zip濡??泥?          MIN=5120
          SIZE=$(stat -c%s build.zip)
          if [ "${SIZE:-0}" -lt "$MIN" ]; then
            echo "[warn] build.zip too small (${SIZE}B) -> fallback to repo zip"
            rm -f build.zip
            zip -r build.zip . -x ".git/*" ".github/*" "node_modules/*"
          fi

          echo "BUILD_PATH=$PWD/build.zip" >> "$GITHUB_ENV"

      - name: Compute SHA256 (build.zip)
        shell: bash
        run: |
          set -e
          sha256sum "$BUILD_PATH" | tee build.zip.sha256
          echo "CHECKSUM_PATH=$PWD/build.zip.sha256" >> "$GITHUB_ENV"
          # value only
          SUM=$(cut -d' ' -f1 build.zip.sha256)
          echo "CHECKSUM_VALUE=$SUM" >> "$GITHUB_ENV"

      - name: Generate release body
        shell: bash
        run: |
          set -e
          {
            echo "### Build"
            echo "- Attached: build.zip"
            echo "- SHA256: \`${CHECKSUM_VALUE}\`"
            echo
            echo "### Release Date"
            echo "- $REL_DATE (KST)"
            echo
            echo "### Changelog"
            if [ -f CHANGELOG.md ]; then
              awk '/^## /{if (p) exit; p=1; print; next} p{print}' CHANGELOG.md || true
            else
              echo "(No CHANGELOG.md found)"
            fi
          } > rel_body.md
          echo "BODY_PATH=$PWD/rel_body.md" >> "$GITHUB_ENV"

      - name: Publish release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.TAG }}
          name: "Release ${{ env.TAG }} - ${{ env.REL_DATE }}"
          commit: ${{ github.sha }}
          bodyFile: ${{ env.BODY_PATH }}
          prerelease: ${{ inputs.prerelease }}
          makeLatest: true
          allowUpdates: true
          replacesArtifacts: true
          artifacts: ${{ env.BUILD_PATH }},${{ env.CHECKSUM_PATH }}

      - name: Auto re-run failed jobs once
        if: ${{ failure() && github.run_attempt == '1' }}
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.actions.reRunWorkflowFailedJobs({
              owner: context.repo.owner, repo: context.repo.repo, run_id: context.runId
            })

      - name: Open failure issue
        if: ${{ failure() }}
        uses: actions/github-script@v7
        env:
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          TAG: ${{ env.TAG }}
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner, repo: context.repo.repo,
              title: `Release failed: ${process.env.TAG}`,
              body: [
                '### ??Release workflow failed',
                `- Run: ${process.env.RUN_URL}`,
                `- Tag: ${process.env.TAG}`,
                `- Ref: ${context.ref}`,
                `- Actor: ${context.actor}`,
                `- Commit: ${context.sha}`,
                '',
                '臾몄꽌: docs/RELEASES.md',
              ].join('\n'),
              labels: ['release','failed']
            })
