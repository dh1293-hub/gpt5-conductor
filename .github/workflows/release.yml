name: release

on:
  workflow_dispatch:
  schedule:
    - cron: "30 18 * * *" # 매일 03:30 KST
  push:
    branches: [ "main" ]
    paths:
      - "CHANGELOG.md"

# ⛑ 필요한 권한 (contents + actions(재시도) + issues(알림))
permissions:
  contents: write
  actions: write
  issues: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  release:
    if: ${{ github.event_name != 'push' || !contains(github.event.head_commit.message, 'chore(release)') }}
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout (full history for tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 실행 링크를 로그/요약에 남겨서 찾기 쉽게
      - name: Print run URL
        run: echo "Run URL: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"

      - name: Add run link to Job Summary
        uses: actions/github-script@v7
        env:
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        with:
          script: |
            await core.summary
              .addHeading('Release run')
              .addLink('Open this run', process.env.RUN_URL)
              .write()

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install deps (CI)
        run: npm ci

      - name: Configure git bot
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Dry run (standard-version)
        run: npx standard-version --dry-run

      - name: Bump & tag (patch)
        run: npx standard-version --release-as patch

      - name: Resolve tag & KST date
        run: |
          echo "TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
          echo "REL_DATE=$(TZ=Asia/Seoul date +'%Y-%m-%d %H:%M KST')" >> $GITHUB_ENV

      - name: Build (prod)
        run: npm run build

      - name: Archive (zip)
        run: |
          if [ -d "dist" ]; then
            zip -r build.zip dist
          elif [ -d "build" ]; then
            zip -r build.zip build
          else
            echo "No dist/ or build/ directory found"; exit 2
          fi

      - name: Keep zip as CI artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-zip
          path: build.zip
          if-no-files-found: error

      - name: Push with tags
        run: git push --follow-tags origin HEAD:main

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          name: "Release ${{ env.TAG }} — ${{ env.REL_DATE }}"
          generate_release_notes: true
          append_body: true
          body: |
            ### 📦 Build
            - Attached: `build.zip`

            ### 🗓 Release Date
            - ${{ env.REL_DATE }} (KST)
          files: build.zip

      # 🔁 실패 시 1회 자동 재시도(실패한 job들만)
      - name: Auto re-run failed jobs once
        if: ${{ failure() && github.run_attempt == '1' }}
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.actions.reRunWorkflowFailedJobs({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            })
            core.notice('Triggered auto re-run for failed jobs (attempt 2/2).')

      # 🚨 2번째도 실패하면 이슈 자동 생성(알림)
      - name: Open failure issue with run link
        if: ${{ failure() && github.run_attempt != '1' }}
        uses: actions/github-script@v7
        env:
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        with:
          script: |
            const title = `Release workflow failed (attempt ${process.env.GITHUB_RUN_ATTEMPT})`;
            const body = [
              `**Run**: ${process.env.RUN_URL}`,
              `**Ref**: ${context.ref}`,
              `**Actor**: ${context.actor}`,
              `**Commit**: ${context.sha}`
            ].join('\n');
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              body,
              labels: ['release','failed']
            })
            core.error('Opened issue for failed release run.')